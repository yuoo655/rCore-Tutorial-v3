var searchIndex = JSON.parse('{\
"os":{"doc":"","t":[7,3,3,12,12,0,11,11,11,11,5,0,0,11,11,0,11,11,0,5,5,11,11,0,0,5,14,14,5,0,0,0,0,5,0,0,11,11,11,11,11,11,14,14,5,6,17,6,17,17,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,2,17,17,17,17,2,17,17,17,17,17,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,5,14,5,11,11,11,5,5,11,5,5,5,5,11,11,11,11,11,11,11,11,11,5,5,14,11,11,2,2,2,2,0,0,0,3,2,2,12,5,11,11,11,11,11,0,11,11,11,0,12,13,13,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,11,11,13,12,12,13,12,12,12,12,12,12,12,12,12,12,11,4,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,17,17,17,17,17,17,12,12,17,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,17,3,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5,11,8,2,3,12,11,11,11,11,10,11,0,10,11,11,11,10,18,18,18,18,3,3,3,3,3,3,18,18,3,18,18,3,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,2,2,2,2,2,0,2,2,2,0,10,10,0,10,10,18,3,3,3,18,18,3,18,18,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,5,11,11,11,12,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,13,13,13,3,3,17,4,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,0,5,5,2,0,0,2,2,2,2,2,12,12,12,12,17,17,3,3,3,3,8,17,6,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,6,3,3,12,10,11,11,11,11,11,11,11,11,11,12,10,11,11,11,12,11,5,5,5,11,11,11,11,5,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,7,7,5,5,5,13,13,3,3,3,4,3,18,18,18,18,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,5,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,12,11,11,11,11,11,12,11,11,11,5,11,11,5,5,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,18,18,3,3,3,18,18,3,3,18,18,18,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,5,5,5,5,5,5,2,2,2,2,2,2,2,2,0,0,0,0,0,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,5,5,5,5,5,5,5,5,5,8,3,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,3,3,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,3,12,12,0,5,2,2,5,5,11,11,11,11,5,5,5,5,5,0,5,2,2,2,2,11,11,5,2,11,11,5,2,2,11,11,2,2,0,2,0,2,2,2,0,0,2,2,0,0,2,2,2,0,2,5,0,2,0,2,11,11,11,11,11,11,2,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,3,3,4,13,13,17,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,7,17,17,5,5,5,5,5,5,5,3,3,12,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,12,11,5,11,11,11,11,11,11,12,12,3,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,12,11,5,5,11,11,11,11,11,11,5,11,11,11,11,11,11,12,11,5,12,11,11,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,12,5,5,5,5,5,5,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,5,5,11,11,11,5,11,11,11,11,11,11,11,11,11,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,13,13,3,3,4,13,11,12,11,11,11,11,11,11,12,11,11,11,12,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,12,12,11,11,11,11,12,11,12,12,12,12,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,12,17,17,3,3,12,5,11,11,11,11,5,11,11,11,12,11,11,5,5,11,11,11,5,12,11,11,11,11,11,11,2,0,5,5,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,12,11,11,11,12],"n":["AP_CAN_INIT","BOOTED_CPU_NUM","DEV_NON_BLOCKING_ACCESS","__private_field","__private_field","board","borrow","borrow","borrow_mut","borrow_mut","clear_bss","config","console","deref","deref","drivers","from","from","fs","hart_id","init_other_cpu","into","into","lang_items","mm","others_main","print","println","rust_main","sbi","sync","syscall","task","thread_local_init","timer","trap","try_from","try_from","try_into","try_into","type_id","type_id","user_print","user_println","wait_all_cpu_started","BlockDeviceImpl","CLOCK_FREQ","CharDeviceImpl","MMIO","PLIC_BASE","UART0","UART0_IRQ","VIRTIO0","VIRTIO0_IRQ","VIRT_PLIC","VIRT_UART","device_init","irq_handler","plic_claim","plic_complete","plic_init","plic_init_hart","plic_sclaim","plic_senable","plic_spriority","read","write","CLOCK_FREQ","CPU_NUM","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","MEMORY_END","MMIO","PAGE_SIZE","PAGE_SIZE_BITS","TRAMPOLINE","TRAP_CONTEXT","TRAP_CONTEXT_BASE","USER_STACK_SIZE","KernelConsole","SimpleLogger","Uart","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","enabled","flush","from","from","from","hart_id","hart_with_color","init","into","into","into","kernel_print","level_to_color_code","log","print_hart_with_color","print_in_color","putchar","putfmt","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","user_print","user_putfmt","with_color","write_str","write_str","BLOCK_DEVICE","BLOCK_DEVICE","UART","UART","block","chardev","plic","BLOCK_DEVICE","SDCardWrapper","VirtIOBlock","__private_field","block_device_test","borrow","borrow_mut","deref","from","into","sdcard","try_from","try_into","type_id","virtio_blk","0","ACMD23","ACMD41","CID_CRC","CMD","CMD0","CMD10","CMD12","CMD16","CMD17","CMD18","CMD24","CMD25","CMD55","CMD58","CMD59","CMD8","CMD9","CMDFailed","CSDStruct","CSD_CRC","CS_HIGH","CS_LOW","CannotGetCardInfo","CardBlockSize","CardCapacity","CardCapacityStatusNotSet","CardComdClasses","ContentProtectAppli","CopyFlag","DSRImpl","DeviceSize","ECC","EraseGrMul","EraseGrSize","FileFormat","FileFormatGroup","HIGH_SPEED_ENABLE","InitError","ManDeflECC","ManufactDate","ManufacturerID","MaxBusClkFrec","MaxWrBlockLen","NSAC","OEM_AppliID","PERIPHERALS","PartBlockRead","PermWrProtect","ProdName1","ProdName2","ProdRev","ProdSN","RdBlockLen","RdBlockMisalign","Reserved1","Reserved1","Reserved2","Reserved2","Reserved3","Reserved4","SDCard","SDCardCID","SDCardCSD","SDCardInfo","SDCardWrapper","SD_CS","SD_CS_GPIONUM","SD_START_DATA_MULTIPLE_BLOCK_READ","SD_START_DATA_MULTIPLE_BLOCK_WRITE","SD_START_DATA_SINGLE_BLOCK_READ","SD_START_DATA_SINGLE_BLOCK_WRITE","SD_cid","SD_csd","SEC_LEN","SysSpecVersion","TAAC","TempWrProtect","WrBlockMisalign","WrProtectGrEnable","WrProtectGrSize","WrSpeedFact","WriteBlockPaPartial","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cs_gpionum","deref","end_cmd","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_cardinfo","get_cidregister","get_csdregister","get_dataresponse","get_response","handle_irq","init","init_sdcard","into","into","into","into","into","into","into","into","io_init","lowlevel_init","new","new","read_block","read_data","read_sector","send_cmd","spi","spi_cs","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_block","write_data","write_sector","0","0","1","QUEUE_FRAMES","VIRTIO0","VirtIOBlock","__private_field","borrow","borrow","borrow_mut","borrow_mut","condvars","deref","from","from","handle_irq","into","into","new","read_block","try_from","try_from","try_into","try_into","type_id","type_id","virtio_blk","virtio_dma_alloc","virtio_dma_dealloc","virtio_phys_to_virt","virtio_virt_to_phys","write_block","CharDevice","NS16550a","UART","__private_field","borrow","borrow_mut","deref","from","handle_irq","into","ns16550a","read","try_from","try_into","type_id","write","AUX_OUTPUT1","AUX_OUTPUT2","DATA_AVAILABLE","DATA_TERMINAL_READY","IER","LSR","MCR","NS16550a","NS16550aInner","NS16550aRaw","REQUEST_TO_SEND","RX_AVALIABLE","ReadWithoutDLAB","THR_EMPTY","TX_EMPTY","WriteWithoutDLAB","_padding0","_padding1","_padding1","_padding2","all","all","all","base_addr","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","complement","condvar","contains","contains","contains","difference","difference","difference","empty","empty","empty","eq","eq","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","handle_irq","hash","hash","hash","ier","ier","iir","init","inner","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","lcr","lcr","lsr","lsr","mcr","mcr","ne","ne","ne","new","new","not","not","not","ns16550a","partial_cmp","partial_cmp","partial_cmp","rbr","read","read","read_buffer","read_end","remove","remove","remove","set","set","set","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","thr","to_owned","to_owned","to_owned","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","write","write","write_end","IntrTargetPriority","Machine","PLIC","Supervisor","base_addr","borrow","borrow","borrow_mut","borrow_mut","claim","claim_comp_ptr_of_hart_with_priority","clone","clone_into","complete","disable","enable","enable_ptr","from","from","get_priority","get_threshold","hart_id_with_priority","into","into","new","priority_ptr","set_priority","set_threshold","supported_number","threshold_ptr_of_hart_with_priority","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","File","OSInode","OpenFlags","Pipe","Stdin","Stdout","inode","list_apps","make_pipe","open_file","pipe","read","readable","stdio","writable","write","CREATE","OSInode","OSInodeInner","OpenFlags","RDONLY","RDWR","ROOT_INODE","TRUNC","WRONLY","__private_field","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","deref","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","inode","insert","intersection","intersects","into","into","into","into","is_all","is_empty","list_apps","ne","new","not","offset","open_file","partial_cmp","read","read_all","read_write","readable","readable","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","writable","writable","write","Empty","Full","Normal","Pipe","PipeRingBuffer","RING_BUFFER_SIZE","RingBufferStatus","all_write_ends_closed","arr","available_read","available_write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone_into","eq","from","from","from","head","into","into","into","make_pipe","new","read","read_byte","read_end_with_buffer","readable","readable","set_write_end","status","tail","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","writable","writable","write","write_byte","write_end","write_end_with_buffer","Stdin","Stdout","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","read","read","readable","readable","try_from","try_from","try_into","try_into","type_id","type_id","writable","writable","write","write","panic","FrameTracker","KERNEL_SPACE","KERNEL_SPACE","MapPermission","MemorySet","PageTable","PageTableEntry","PhysAddr","PhysPageNum","StepByOne","UserBuffer","UserBufferIterator","VirtAddr","VirtPageNum","address","frame_alloc","frame_allocator","frame_dealloc","heap_allocator","init","init_kernel_space","kernel_token","memory_set","page_table","remap_test","translated_byte_buffer","translated_ref","translated_refmut","translated_str","0","0","0","0","PA_WIDTH_SV39","PPN_WIDTH_SV39","PhysAddr","PhysPageNum","SimpleRange","SimpleRangeIterator","StepByOne","VA_WIDTH_SV39","VPNRange","VPN_WIDTH_SV39","VirtAddr","VirtPageNum","aligned","aligned","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","current","end","eq","eq","eq","eq","floor","floor","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_bytes_array","get_end","get_mut","get_mut","get_pte_array","get_ref","get_start","indexes","into","into","into","into","into","into","into_iter","into_iter","l","ne","ne","ne","ne","new","new","next","page_offset","page_offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","step","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","FRAME_ALLOCATOR","FrameAllocator","FrameAllocatorImpl","FrameTracker","StackFrameAllocator","__private_field","alloc","alloc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current","dealloc","dealloc","deref","drop","end","fmt","frame_alloc","frame_allocator_test","frame_dealloc","from","from","from","init","init_frame_allocator","into","into","into","new","new","new","ppn","recycled","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HEAP_ALLOCATOR","HEAP_SPACE","handle_alloc_error","heap_test","init_heap","Framed","Identical","KERNEL_SPACE","MapArea","MapPermission","MapType","MemorySet","R","U","W","X","__private_field","activate","all","areas","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","complement","contains","copy_data","data_frames","deref","difference","ebss","edata","ekernel","empty","eq","eq","erodata","etext","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_another","from_bits","from_bits_truncate","from_bits_unchecked","from_elf","from_existed","from_existed_user","from_iter","hash","insert","insert_framed_area","insert_identical_area","intersection","intersects","into","into","into","into","into","is_all","is_empty","kernel_copy","kernel_token","map","map_one","map_perm","map_trampoline","map_type","ne","new","new_bare","new_kernel","not","page_table","partial_cmp","push","recycle_data_pages","remap_test","remove","remove_area_with_start_vpn","sbss_with_stack","sdata","set","srodata","stext","strampoline","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","toggle","token","translate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","unmap_one","vpn_range","A","D","G","PTEFlags","PageTable","PageTableEntry","R","U","UserBuffer","UserBufferIterator","V","W","X","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","clone","clone","clone_into","clone_into","cmp","complement","contains","current_buffer","current_idx","difference","empty","empty","eq","executable","extend","find_pte","find_pte_create","flags","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_token","hash","insert","intersection","intersects","into","into","into","into","into","into_iter","into_iter","is_all","is_empty","is_valid","len","map","ne","new","new","new","next","not","partial_cmp","ppn","readable","remove","root_ppn","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","translate_va","translated_byte_buffer","translated_ref","translated_refmut","translated_str","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","writable","SBI_CLEAR_IPI","SBI_CONSOLE_GETCHAR","SBI_CONSOLE_PUTCHAR","SBI_REMOTE_FENCE_I","SBI_REMOTE_SFENCE_VMA","SBI_REMOTE_SFENCE_VMA_ASID","SBI_SEND_IPI","SBI_SET_TIMER","SBI_SHUTDOWN","console_getchar","console_putchar","sbi_call","send_ipi","set_timer","shutdown","Condvar","Mutex","MutexBlocking","MutexSpin","Semaphore","UPIntrFreeCell","UPIntrRefMut","UPSafeCell","condvar","ksync","mutex","semaphore","up","Condvar","CondvarInner","borrow","borrow","borrow_mut","borrow_mut","from","from","inner","into","into","new","signal","try_from","try_from","try_into","try_into","type_id","type_id","wait","wait_no_sched","wait_queue","wait_with_mutex","k_condvar_create","k_condvar_signal","k_condvar_wait","k_mutex_create","k_mutex_lock","k_mutex_unlock","k_semaphore_create","k_semaphore_down","k_semaphore_up","k_sleep","Mutex","MutexBlocking","MutexBlockingInner","MutexSpin","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","inner","into","into","into","lock","lock","lock","locked","locked","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unlock","unlock","unlock","wait_queue","Semaphore","SemaphoreInner","borrow","borrow","borrow_mut","borrow_mut","count","down","from","from","inner","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","up","wait_queue","0","INTR_MASKING_INFO","IntrMaskingInfo","UPIntrFreeCell","UPIntrRefMut","UPSafeCell","__private_field","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","drop","enter","exclusive_access","exclusive_access","exclusive_session","exit","from","from","from","from","from","inner","inner","into","into","into","into","into","nested_level","new","new","new","sie_before_masking","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","SYSCALL_CLOSE","SYSCALL_CONDVAR_CREATE","SYSCALL_CONDVAR_SIGNAL","SYSCALL_CONDVAR_WAIT","SYSCALL_DUP","SYSCALL_EXEC","SYSCALL_EXIT","SYSCALL_FORK","SYSCALL_GETPID","SYSCALL_GETTID","SYSCALL_GET_TIME","SYSCALL_KILL","SYSCALL_MUTEX_CREATE","SYSCALL_MUTEX_LOCK","SYSCALL_MUTEX_UNLOCK","SYSCALL_OPEN","SYSCALL_PIPE","SYSCALL_READ","SYSCALL_SEMAPHORE_CREATE","SYSCALL_SEMAPHORE_DOWN","SYSCALL_SEMAPHORE_UP","SYSCALL_SLEEP","SYSCALL_THREAD_CREATE","SYSCALL_WAITPID","SYSCALL_WAITTID","SYSCALL_WRITE","SYSCALL_YIELD","fs","process","sync","syscall","thread","sys_close","sys_dup","sys_open","sys_pipe","sys_read","sys_write","check_sigaction_error","sys_exec","sys_exit","sys_fork","sys_get_time","sys_getpid","sys_kill","sys_sigaction","sys_sigprocmask","sys_sigretrun","sys_waitpid","sys_yield","sys_condvar_create","sys_condvar_signal","sys_condvar_wait","sys_mutex_create","sys_mutex_lock","sys_mutex_unlock","sys_semaphore_create","sys_semaphore_down","sys_semaphore_up","sys_sleep","sys_gettid","sys_thread_create","sys_waittid","INITPROC","KernelStack","MAX_SIG","PID2TCB","PID2TCB","PidHandle","RecycleAllocator","SignalAction","SignalActions","SignalFlags","TaskContext","TaskControlBlock","TaskStatus","TgidHandle","WAIT_LOCK","__private_field","__private_field","action","add_initproc","add_task","add_task_first_time","block_current_and_run_next","block_current_task","borrow","borrow","borrow_mut","borrow_mut","call_kernel_signal_handler","call_user_signal_handler","check_pending_signals","check_signals_error_of_current","check_signals_of_current","context","current_add_signal","current_task","current_trap_cx","current_trap_cx_user_va","current_user_token","deref","deref","exit_current_and_run_next","fetch_task","from","from","handle_signals","hart_id","insert_into_pid2task","into","into","kernel_tgid_alloc","kstack_alloc","kthread","kthread_stack_bottom_from_tid","kthread_test","kthread_test_sem","kthread_trap_cx_bottom_from_tid","kthreadd_create","manager","pid","pid2task","pid_alloc","pool","processor","remove_from_pid2task","run_tasks","schedule","signal","sleep_task","suspend_current_and_run_next","switch","take_current_task","task","trap_cx_bottom_from_pid","try_from","try_from","try_into","try_into","type_id","type_id","ustack_bottom_from_pid","SignalAction","SignalActions","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","fmt","from","from","handler","into","into","mask","table","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","TaskContext","borrow","borrow_mut","clone","clone_into","fmt","from","goto_trap_return","into","ra","s","sp","to_owned","try_from","try_into","type_id","zero_init","0","0","KERNEL_TGID_ALLOCATOR","KStack","KthreadBits","KthreadShouldPark","KthreadShouldStop","STACK_SIZE","TgidHandle","__private_field","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","create_kthread","deref","do_exit","drop","eq","eq","exit_kthread_and_run_next","fmt","fmt","from","from","from","from","into","into","into","into","kernel_tgid_alloc","kthread_should_stop","kthread_stack_bottom_from_tid","kthread_trap_cx_bottom_from_tid","kthread_yield","kthreadd","kthreadd_create","ne","new","new_kthread_trap_cx","partial_cmp","send_kthread_stop","to_owned","to_owned","top","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wait_for_completion","A","PER_THREAD","THREAD_COUNT","f","kthread_get_current","kthread_print","kthread_runs_until_rec_kthread_stop","kthread_stop_test","kthread_test","kthread_test_sem","PID2TCB","TaskManager","__private_field","add","borrow","borrow","borrow_mut","borrow_mut","deref","fetch","from","from","insert_into_pid2task","into","into","new","pid2task","prioritize","ready_queue","remove","remove_from_pid2task","try_from","try_from","try_into","try_into","type_id","type_id","0","0","KSTACK_ALLOCATOR","KernelStack","PID_ALLOCATOR","PidHandle","RecycleAllocator","__private_field","__private_field","alloc","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cmp","current","dealloc","deref","deref","drop","drop","eq","eq","fmt","from","from","from","from","from","get_top","into","into","into","into","into","kernel_stack_position","kstack_alloc","ne","new","partial_cmp","pid_alloc","push_on_top","recycled","trap_cx_bottom_from_pid","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ustack_bottom_from_pid","TASK_POOL","TaskPool","__private_field","add","add_task","add_task_first_time","borrow","borrow","borrow_mut","borrow_mut","deref","fetch","fetch_task","from","from","into","into","new","remove","scheduler","sleep","sleep_task","sleeping_tasks","try_from","try_from","try_into","try_into","type_id","type_id","wake","PROCESSORS","Processor","ProcessorInner","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current","current","current_task","current_tasks","current_trap_cx","current_trap_cx_kernel_va","current_trap_cx_user_va","current_user_token","default","deref","from","from","from","get_idle_task_cx_ptr","hart_id","idle_task_cx","inner","into","into","into","new","run","run_next","run_tasks","schedule","suspend_current","take_current","take_current_mut","take_current_task","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","MAX_SIG","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGDEF","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGKILL","SIGPIPE","SIGPROF","SIGPWR","SIGQUIT","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SignalFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","check_error","clone","clone_into","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","ne","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","__switch","Blocking","Ready","Running","TaskControlBlock","TaskControlBlockInner","TaskStatus","Zombie","alloc_fd","base_size","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","clone","clone_into","cmp","condvar_list","eq","eq","exec","exit_code","fd_table","flags","fork","from","from","from","frozen","get_exit_code","get_status","get_task_cx_ptr","get_trap_cx","get_user_token","getpid","handling_sig","inner","inner_exclusive_access","into","into","into","is_zombie","kernel_stack","killed","kthreadd_create","memory_set","mutex_list","ne","new","new_kernel_thread","new_user_thread","parent","partial_cmp","pid","semaphore_list","signal_actions","signal_mask","signals","task_cx","task_status","tgid","to_owned","trap_ctx_backup","trap_cx_ppn","trap_cx_user_va","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","MSEC_PER_SEC","TICKS_PER_SEC","TIMERS","TimerCondVar","__private_field","add_timer","borrow","borrow","borrow_mut","borrow_mut","check_timer","cmp","deref","eq","expire_ms","from","from","get_time","get_time_ms","into","into","partial_cmp","set_next_trigger","task","try_from","try_from","try_into","try_into","type_id","type_id","TrapContext","context","disable_supervisor_interrupt","enable_supervisor_interrupt","enable_timer_interrupt","init","set_kernel_trap_entry","set_user_trap_entry","trap_from_kernel","trap_handler","trap_return","TrapContext","app_init_context","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","kernel_satp","kernel_sp","sepc","set_sp","sstatus","to_owned","trap_handler","try_from","try_into","type_id","x"],"q":["os","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::board","","","","","","","","","","","","","","","","","","","","","","os::config","","","","","","","","","","","","os::console","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::drivers","","","","","","","os::drivers::block","","","","","","","","","","","","","","","os::drivers::block::sdcardos::drivers::block::sdcard::InitError","","","os::drivers::block::virtio_blk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::drivers::chardev","","","","","","","","","","","","","","","","os::drivers::chardev::ns16550aos::drivers::plic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs","","","","","","","","","","","","","","","","os::fs::inode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::pipe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::stdio","","","","","","","","","","","","","","","","","","","","","","","","os::lang_items","os::mm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::frame_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::heap_allocator","","","","","os::mm::memory_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::page_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::sbi","","","","","","","","","","","","","","","os::sync","","","","","","","","","","","","","os::sync::condvar","","","","","","","","","","","","","","","","","","","","","","","os::sync::ksync","","","","","","","","","","os::sync::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::sync::semaphore","","","","","","","","","","","","","","","","","","","","","","os::sync::up","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::syscall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::syscall::fs","","","","","","os::syscall::process","","","","","","","","","","","","os::syscall::sync","","","","","","","","","","os::syscall::thread","","","os::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::action","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::context","","","","","","","","","","","","","","","","","os::task::kthread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::kthread_test","","","","","","","","","","os::task::manager","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::pid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::switch","os::task::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::task::TaskStatus","os::timer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::trap","","","","","","","","","","","os::trap::context","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Get current cpu id","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","print","","","","","","","","","","","","","","","","","","","","","","","","qemu puts UART registers here in physical memory.","","virtio mmio interface","","","","","","Ask the PLIC what interrupt we should serve. ","Tell the PLIC we’ve served the IRQ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add escape sequence to print with color in Linux console","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Add escape sequence to print with color in Linux console","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Number of blocks to erase (SDC) ","Initiate initialization process (SDC) ","","SD commands ","Software reset ","Read CID register ","Stop to read data ","Change R/W block size ","Read block ","Read multiple blocks ","Write a block ","Write multiple blocks ","Leading command for ACMD* ","Read OCR ","Enable/disable CRC check ","Check voltage range (SDC V2) ","Read CSD register ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Card Identification Data: CID Register","Card Specific Data: CSD Register","Card information","","CS value passed to SPI controller, this is a dummy value …","GPIOHS GPIO number to use for controlling the SD card CS …","Data token start byte, Start Multiple Block Read ","Data token start byte, Start Multiple Block Write ","Data token start byte, Start Single Block Read ","Data token start byte, Start Single Block Write ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Connect pins to internal functions ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","InterruptEnableRegister","LineStatusRegister","Model Control Register","","","","","","","","","","ignore FCR","ignore MSR","ignore other registers","ignore SCR","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","interrupt enable register","interrupt enable register","interrupt identification register","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","line control register","line control register","line status register","line status register","model control register","modem control register","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","receiver buffer register","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","transmitter holding register","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","","","","","Do not check validity for simplicity Return (readable, …","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (read_end, write_end)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Definitions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","data: start-aligned but maybe with shorter length assume …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Include sections in elf and trampoline, also returns …","","","","","Inserts the specified flags in-place.","Assume that no conflicts.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","Mention that trampoline is not collected by areas.","","","","","Without kernel stacks.","Returns the complement of this set of flags.","","","","","","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Temporarily used to get arguments from user space.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Load a string from other address spaces into kernel space …","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panic if the data has been borrowed.","Panic if the data has been borrowed.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","inner data","inner data","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","User is responsible to guarantee that inner struct is only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If there is not a child process whose pid is same as …","","","","","","","","","","","","","","thread does not exist, return -1 thread has not exited …","","","","","","","","","","","","","","","","","","","","","","","This function must be followed by a schedule","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Action for a signal","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (bottom, top) of a kernel stack in kernel space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,1,3,0,1,3,1,3,0,0,0,1,3,0,1,3,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,21,11,18,21,11,11,11,18,21,11,0,0,0,18,21,11,0,0,11,0,0,0,0,18,21,11,18,21,11,18,21,11,0,0,0,18,21,0,0,0,0,0,0,0,0,0,0,22,0,22,22,22,22,22,0,22,22,22,0,34,26,26,29,0,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,28,25,25,27,30,30,27,28,28,28,28,28,28,28,28,28,28,25,0,28,29,29,28,28,28,29,0,28,28,29,29,29,29,28,28,28,29,28,29,28,28,0,0,0,0,0,0,0,0,0,0,0,30,30,0,28,28,28,28,28,28,28,28,31,25,34,26,27,28,29,30,31,25,34,26,27,28,29,30,31,26,27,28,29,30,26,27,28,29,30,25,31,25,26,26,27,28,29,30,25,34,26,27,28,29,30,31,25,25,25,25,25,34,25,0,25,34,26,27,28,29,30,31,0,25,25,34,34,25,25,25,25,25,26,27,28,29,30,25,34,26,27,28,29,30,31,25,34,26,27,28,29,30,31,25,34,26,27,28,29,30,31,34,25,25,123,124,123,0,0,0,37,38,37,38,37,38,37,38,37,38,38,37,38,38,38,37,38,37,38,37,38,0,0,0,0,38,0,0,0,42,42,42,42,42,125,42,0,125,42,42,42,125,45,45,44,45,0,0,0,0,0,0,45,43,0,44,43,0,51,50,51,50,43,44,45,49,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,50,51,49,126,48,43,44,45,50,51,49,126,48,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,48,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,43,43,43,43,43,44,44,44,44,44,45,45,45,45,45,50,51,49,126,48,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,48,43,44,45,50,51,50,49,48,43,44,45,43,44,45,43,44,45,50,51,49,126,48,43,44,45,43,44,45,43,44,45,50,51,50,51,50,51,43,44,45,49,48,43,44,45,126,43,44,45,50,49,48,126,49,43,44,45,43,44,45,43,44,45,43,44,45,43,44,45,51,43,44,45,43,44,45,50,51,49,126,48,43,44,45,50,51,49,126,48,43,44,45,50,51,49,126,48,43,44,45,43,44,45,49,48,49,0,53,0,53,52,52,53,52,53,52,52,53,53,52,52,52,52,52,53,52,52,52,52,53,52,52,52,52,53,52,53,52,53,52,53,52,53,0,0,0,0,0,0,0,0,0,0,0,127,127,0,127,127,55,0,0,0,55,55,0,55,55,56,55,55,55,55,55,55,55,55,55,58,128,56,55,58,128,56,55,55,55,55,55,55,56,55,55,55,55,55,55,55,55,55,58,128,56,55,55,55,55,55,55,58,128,55,55,55,58,128,56,55,55,55,0,55,58,55,128,0,55,58,58,55,58,58,55,55,55,55,55,55,55,58,128,56,55,58,128,56,55,58,128,56,55,55,58,58,58,61,61,61,0,0,0,0,60,60,60,60,62,60,61,62,60,61,62,61,61,61,62,60,61,60,62,60,61,0,60,62,60,62,62,62,60,60,60,61,62,60,61,62,60,61,62,60,61,62,62,62,60,60,62,0,0,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,41,66,67,0,0,0,0,0,0,0,0,0,0,0,0,39,41,70,39,41,66,67,69,70,39,41,66,67,69,39,41,39,41,66,67,69,39,41,66,67,69,39,41,66,67,70,70,39,41,66,67,39,41,39,41,66,67,70,39,39,39,41,41,41,66,66,66,67,67,67,69,66,69,39,66,66,39,69,67,70,39,41,66,67,69,70,69,69,39,41,66,67,70,69,70,39,41,39,41,66,67,69,129,66,67,39,41,66,67,69,70,39,41,66,67,69,70,39,41,66,67,69,70,39,41,66,67,69,0,0,0,0,0,73,130,71,71,72,73,71,72,73,72,72,71,130,71,73,72,71,72,0,0,0,71,72,73,71,0,71,72,73,130,71,72,72,71,72,71,72,73,71,72,73,71,72,73,0,0,0,0,0,79,79,0,0,0,0,0,77,77,77,77,81,76,77,76,77,77,77,77,77,77,77,77,76,81,78,79,77,76,81,78,79,77,78,79,77,78,79,77,77,77,77,78,78,81,77,0,0,0,77,79,77,0,0,77,79,77,77,77,77,77,76,81,78,79,77,78,77,77,77,76,76,76,77,77,77,76,76,77,77,76,81,78,79,77,77,77,76,0,78,78,78,76,78,77,78,76,76,77,76,77,76,76,0,77,76,0,0,77,0,0,0,77,77,77,78,79,77,77,76,76,76,81,78,79,77,76,81,78,79,77,76,81,78,79,77,77,78,78,78,83,83,83,0,0,0,83,83,0,0,83,83,83,83,83,83,83,83,83,83,82,83,83,80,54,84,83,82,80,54,84,83,82,54,84,83,82,83,82,83,83,83,84,84,83,83,82,83,82,83,80,80,82,83,83,83,83,83,80,80,54,84,83,82,83,83,83,83,80,83,83,83,83,80,54,84,83,82,54,84,83,83,82,54,80,83,80,54,82,84,83,83,82,82,83,80,83,83,83,83,83,82,83,80,80,80,0,0,0,0,80,54,84,83,82,80,54,84,83,82,80,54,84,83,82,83,80,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,131,86,131,86,131,86,86,131,86,86,86,131,86,131,86,131,86,86,131,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,91,132,90,91,132,90,91,132,91,90,91,132,87,90,91,90,132,90,91,90,91,132,90,91,132,90,91,132,87,90,91,132,0,0,92,133,92,133,133,92,92,133,92,92,133,92,92,133,92,133,92,133,92,133,93,0,0,0,0,0,94,95,32,93,74,94,95,32,93,74,94,93,94,93,93,95,32,74,32,95,95,32,93,74,94,32,74,95,32,93,74,94,95,95,32,74,95,95,32,93,74,94,95,32,93,74,94,95,32,93,74,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,100,0,0,0,0,0,0,99,100,99,100,0,0,0,0,0,0,0,0,0,0,0,99,100,0,0,99,100,0,0,0,99,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,100,99,100,99,100,0,0,0,98,101,98,101,98,101,98,101,98,101,98,98,101,98,98,101,98,101,98,101,98,101,98,101,98,101,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,102,104,0,0,0,103,103,0,0,105,102,105,104,103,102,105,104,103,102,103,102,103,104,0,105,0,102,104,103,0,102,104,102,105,104,103,102,105,104,103,0,0,0,0,0,0,0,104,102,0,104,0,102,103,102,102,105,104,103,102,105,104,103,102,105,104,103,0,0,0,0,0,0,0,0,0,0,0,0,0,109,107,107,109,107,109,109,107,107,109,0,107,109,107,0,107,107,107,0,107,109,107,109,107,109,114,111,0,0,0,0,0,112,113,110,110,114,112,111,113,110,114,112,111,113,111,110,110,112,113,114,111,111,111,111,110,114,112,111,113,114,110,114,112,111,113,0,0,111,110,111,0,114,110,0,110,114,112,111,113,110,114,112,111,113,110,114,112,111,113,0,0,0,116,115,0,0,115,116,115,116,116,115,0,115,116,115,116,115,115,115,115,0,115,115,116,115,116,115,116,115,0,0,0,118,117,134,118,117,134,118,117,134,0,0,0,0,0,0,117,118,117,134,118,117,0,134,117,117,134,118,117,117,117,0,0,117,117,117,0,117,134,118,117,134,118,117,134,118,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,120,120,120,0,0,0,120,119,119,108,119,120,108,119,120,119,120,120,108,119,108,120,108,119,119,119,108,108,119,120,119,119,119,119,119,119,108,119,108,108,108,119,120,119,108,119,108,119,119,120,108,108,108,119,108,108,119,119,119,119,119,119,108,120,119,119,108,108,119,120,108,119,120,108,119,120,135,0,0,0,0,122,0,121,122,121,122,0,121,122,121,121,121,122,0,0,121,122,121,0,121,121,122,121,122,121,122,0,0,0,0,0,0,0,0,0,0,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,[1,2],[3,4],0,[[]],[[]],0,[[],5],[[]],[[]],[[]],0,0,[[]],0,0,[[5,5],6],0,0,0,0,[[]],0,0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],[[10,[9]]]],[9],[[]],[[]],[5,5],[5,5],[5,5],[5,9],[[5,9]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[11,12],13],[11],[[]],[[]],[[]],[[],5],0,[[]],[[]],[[]],[[]],[14],[15,16],[[11,17]],[[14,16,5]],[[14,16]],[16],[14],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[14],[14],0,[[18,19],20],[[21,19],20],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[22,23],[[]],[[]],0,[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[25,[24]]]],[[[25,[24]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[25,[24]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,26],[27,27],[28,28],[29,29],[30,30],[[]],[[]],[[]],[[]],[[]],0,[31,32],[[[25,[24]]]],[[26,26],13],[[26,33],20],[[27,33],20],[[28,33],20],[[29,33],20],[[30,33],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[24]]],[[7,[30]]]],[[[25,[24]]],[[7,[29]]]],[[[25,[24]]],[[7,[28]]]],[[[25,[24]]],16],[[[25,[24]]],16],[34],[[[25,[24]]],[[7,[30,27]]]],[[],[[25,[[36,[35]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[24]]]],[[24,9,16],[[25,[24]]]],[[],34],[[34,5]],[[[25,[24]]]],[[[25,[24]],9],7],[[[25,[24]],26,9,16]],0,0,[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[34,5]],[[[25,[24]]]],[[[25,[24]],9],7],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[37,4],[[]],[[]],[38],[[]],[[]],[[],38],[[38,5]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,[5,39],[[39,5],40],[39,41],[41,39],[[38,5]],0,0,0,0,[[]],[[]],[42,23],[[]],[[]],[[]],0,[[],16],[[],7],[[],7],[[],8],[16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],43],[[],44],[[],45],0,[[43,43],43],[[44,44],44],[[45,45],45],[[43,43]],[[44,44]],[[45,45]],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43]],[[44,44]],[[45,45]],[43,16],[44,16],[45,16],0,0,0,[[43,43],43],[[44,44],44],[[45,45],45],[[43,43]],[[44,44]],[[45,45]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,43],[44,44],[45,45],[[]],[[]],[[]],[[43,43],46],[[44,44],46],[[45,45],46],[43,43],[44,44],[45,45],0,[[43,43],13],[[44,44],13],[[45,45],13],[[43,43],43],[[44,44],44],[[45,45],45],[[],43],[[],44],[[],45],[[43,43],13],[[44,44],13],[[45,45],13],[[43,47]],[[44,47]],[[45,47]],[[43,33],20],[[43,33],20],[[43,33],20],[[43,33],20],[[43,33],20],[[44,33],20],[[44,33],20],[[44,33],20],[[44,33],20],[[44,33],20],[[45,33],20],[[45,33],20],[[45,33],20],[[45,33],20],[[45,33],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,[[10,[43]]]],[16,[[10,[44]]]],[16,[[10,[45]]]],[16,43],[16,44],[16,45],[16,43],[16,44],[16,45],[47,43],[47,44],[47,45],[48],[43],[44],[45],0,0,0,[49],0,[[43,43]],[[44,44]],[[45,45]],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43],13],[[44,44],13],[[45,45],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,13],[44,13],[45,13],[43,13],[44,13],[45,13],0,0,0,0,0,0,[[43,43],13],[[44,44],13],[[45,45],13],[5,49],[[],48],[43,43],[44,44],[45,45],0,[[43,43],[[10,[46]]]],[[44,44],[[10,[46]]]],[[45,45],[[10,[46]]]],0,[49,[[10,[16]]]],[48,16],0,[49,50],[[43,43]],[[44,44]],[[45,45]],[[43,43,13]],[[44,44,13]],[[45,45,13]],[[43,43],43],[[44,44],44],[[45,45],45],[[43,43]],[[44,44]],[[45,45]],[[43,43],43],[[44,44],44],[[45,45],45],0,[[]],[[]],[[]],[[43,43]],[[44,44]],[[45,45]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[43,43],43],[[44,44],44],[[45,45],45],[[49,16]],[[48,16]],[49,51],0,0,0,0,0,[[]],[[]],[[]],[[]],[[52,5,53],9],[[52,5,53],9],[53,53],[[]],[[52,5,53,9]],[[52,5,53,5]],[[52,5,53,5]],[[52,5,53,5]],[[]],[[]],[[52,5],9],[[52,5,53],9],[[5,53],5],[[]],[[]],[5,52],[[52,5],9],[[52,5,9]],[[52,5,53,9]],[[],5],[[52,5,53],9],[[]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,[54,5],[[],13],0,[[],13],[54,5],0,0,0,0,0,0,0,0,0,0,[[],55],[[55,55],55],[[55,55]],[[55,55],55],[[55,55]],[55,9],0,[[55,55],55],[[55,55]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55,55],[[]],[[55,55],46],[55,55],[[55,55],13],[56,23],[[55,55],55],[[],55],[[55,55],13],[[55,47]],[[55,33],20],[[55,33],20],[[55,33],20],[[55,33],20],[[55,33],20],[[]],[[]],[[]],[[]],[9,[[10,[55]]]],[9,55],[9,55],[47,55],[55],0,0,[[55,55]],[[55,55],55],[[55,55],13],[[]],[[]],[[]],[[]],[55,13],[55,13],[[]],[[55,55],13],[[13,13,[23,[57]]],58],[55,55],0,[[19,55],[[10,[[23,[58]]]]]],[[55,55],[[10,[46]]]],[[58,54],5],[58,[[59,[16]]]],[55],[58,13],0,[[55,55]],[[55,55,13]],[[55,55],55],[[55,55]],[[55,55],55],[[]],[[55,55]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[55,55],55],[58,13],0,[[58,54],5],0,0,0,0,0,0,0,[60,13],0,[60,5],[60,5],[[]],[[]],[[]],[[]],[[]],[[]],0,[61,61],[[]],[[61,61],13],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],60],[[62,54],5],[60,16],[[[23,[[4,[60]]]]],62],[62,13],0,[[60,23]],0,0,[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[62,13],0,[[62,54],5],[[60,16]],0,[[[23,[[4,[60]]]]],62],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[63,54],5],[[64,54],5],[63,13],[64,13],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[63,13],[64,13],[[63,54],5],[[64,54],5],[65,6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[39,13],[41,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,66],[41,67],[39,39],[41,41],[66,66],[67,67],[[[69,[68]]],[[69,[68]]]],[[]],[[]],[[]],[[]],[[]],[[39,39],46],[[41,41],46],[[66,66],46],[[67,67],46],0,0,[[39,39],13],[[41,41],13],[[66,66],13],[[67,67],13],[39,66],[41,67],[[39,33],20],[[41,33],20],[[66,33],20],[[67,33],20],[[]],[66,39],[[]],[5,39],[5,41],[67,41],[[]],[5,66],[[]],[39,66],[[]],[5,67],[41,67],[[]],[66],[69],[39],[66],[66],[39],[69],[67],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69],0,[[39,39],13],[[41,41],13],[[66,66],13],[[67,67],13],[[],70],[[],69],[70,10],[39,5],[41,5],[[39,39],[[10,[46]]]],[[41,41],[[10,[46]]]],[[66,66],[[10,[46]]]],[[67,67],[[10,[46]]]],0,[[]],[66],[67],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,[[],[[10,[66]]]],[71,[[10,[66]]]],[[]],[[]],[[]],[[]],[[]],[[]],[72,72],[[]],0,[66],[[71,66]],[73,74],[72],0,[[72,33],20],[[],[[10,[72]]]],[[]],[66],[[]],[[]],[[]],[[71,66,66]],[[]],[[]],[[]],[[]],[[]],[[],71],[66,72],0,0,[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],0,0,[75,6],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[76],[[],77],0,[[77,77],77],[[77,77]],[[77,77],77],[[77,77]],[77,16],0,[[77,77],77],[[77,77]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78,78],[79,79],[77,77],[[]],[[]],[[]],[[77,77],46],[77,77],[[77,77],13],[[78,80]],0,[81,23],[[77,77],77],0,0,0,[[],77],[[79,79],13],[[77,77],13],0,0,[[77,47]],[[79,33],20],[[77,33],20],[[77,33],20],[[77,33],20],[[77,33],20],[[77,33],20],[[]],[[]],[[]],[[]],[[]],[78,78],[16,[[10,[77]]]],[16,77],[16,77],[5],[[76,5]],[[76,5]],[47,77],[77],[[77,77]],[[76,41,41,77]],[[76,41,41,77]],[[77,77],77],[[77,77],13],[[]],[[]],[[]],[[]],[[]],[77,13],[77,13],[[],76],[[],5],[[78,80]],[[78,80,67]],0,[76],0,[[77,77],13],[[41,41,79,77],78],[[],76],[[],76],[77,77],0,[[77,77],[[10,[46]]]],[[76,78,10]],[76],[[]],[[77,77]],[[76,67]],0,0,[[77,77,13]],0,0,0,[[77,77],77],[[77,77]],[[77,77],77],[[]],[[]],[[]],[[77,77]],[76,5],[[76,67],[[10,[82]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[77,77],77],[[78,80]],[[78,80,67]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],83],[[83,83],83],[[83,83]],[[83,83],83],[[83,83]],[83,16],0,0,[[83,83],83],[[83,83]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[83,83],[82,82],[[]],[[]],[[83,83],46],[83,83],[[83,83],13],0,0,[[83,83],83],[[],83],[[],82],[[83,83],13],[82,13],[[83,47]],[[80,67],[[10,[82]]]],[[80,67],[[10,[82]]]],[82,83],[[83,33],20],[[83,33],20],[[83,33],20],[[83,33],20],[[83,33],20],0,[[]],[[]],[[]],[[]],[[]],[16,[[10,[83]]]],[16,83],[16,83],[47,83],[5,80],[83],[[83,83]],[[83,83],83],[[83,83],13],[[]],[[]],[[]],[[]],[[]],[54],[[]],[83,13],[83,13],[82,13],[54,5],[[80,67,66,83]],[[83,83],13],[[],80],[59,54],[[66,83],82],[84,10],[83,83],[[83,83],[[10,[46]]]],[82,66],[82,13],[[83,83]],0,[[83,83,13]],[[83,83],83],[[83,83]],[[83,83],83],[[]],[[]],[[83,83]],[80,5],[[80,67],[[10,[82]]]],[[80,41],[[10,[39]]]],[[5,16,5],59],[5],[5],[[5,16],85],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[83,83],83],[[80,67]],[82,13],0,0,0,0,0,0,0,0,0,[[],5],[5],[[5,5,5,5],5],[5],[5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],86],[86],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[86,[23,[87]]]],[86,88],0,[[86,[23,[87]]]],[5,89],[5,89],[[5,5],89],[13,89],[5,89],[5,89],[5,89],[5,89],[5,89],[5,89],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[90],[91],0,0,[[],90],[[],91],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[]],[90],[91],0,0,0,[[]],[[]],[[]],[[]],0,[92],[[]],[[]],0,[[]],[[]],[5,92],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[92],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93],[94,74],[93],[93],[95],[32,96],[74,96],[32],[95],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],0,[[],95],[[],32],[[],74],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,89],0,[5,89],[5,89],[[16,9],89],[5,89],[[5,16,5],89],[[5,16,5],89],[[97,5,5],13],[[16,5],89],[40,6],[[],89],[[],89],[[],89],[[5,9],89],[[40,98,98],89],[9,89],[[],89],[[89,40],89],[[],89],[5,89],[5,89],[[5,5],89],[13,89],[5,89],[5,89],[5,89],[5,89],[5,89],[5,89],[[],89],[[5,5],89],[5,40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,[[]],[[],88],[[]],[[]],[[]],[[]],[97],[[5,97]],[[]],[[],10],[[],10],0,[97],0,0,0,0,[99,4],[100,23],[40],0,[[]],[[]],[[]],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,[[]],[[]],[[]],[[]],[98,98],[101,101],[[]],[[]],[[],98],[[],101],[[98,33],20],[[]],[[]],0,[[]],[[]],0,0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,[[]],[[]],[88,88],[[]],[[88,33],20],[[]],[5,88],[[]],0,0,0,[[]],[[],7],[[],7],[[],8],[[],88],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[102,102],[103,103],[[]],[[]],[[104,104],46],[5,40],[105,4],[40],[102],[[104,104],13],[[103,103],13],[40],[[102,33],20],[[104,33],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],104],[[],13],[5,5],[5,5],[[]],[[],6],[[]],[[104,104],13],[[],102],[[5,5],106],[[104,104],[[10,[46]]]],[5],[[]],[[]],[102,5],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[5],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[107,[23,[108]]]],[[]],[[]],[[]],[[]],[109,4],[107,[[10,[[23,[108]]]]]],[[]],[[]],[[5,[23,[108]]]],[[]],[[]],[[],107],[5,[[10,[[23,[108]]]]]],[[107,5]],0,[[107,23]],[5],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,[110,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[111,111],46],0,[[110,5]],[112,4],[113,4],[114],[111],[[111,5],13],[[111,111],13],[[111,33],20],[[]],[[]],[[]],[[]],[[]],[114,5],[[]],[[]],[[]],[[]],[[]],[5],[[],114],[[111,111],13],[5,110],[[111,111],[[10,[46]]]],[[],111],[114],0,[5,5],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[5,5],0,0,0,[[115,[23,[108]]]],[[[23,[108]]]],[[[23,[108]]]],[[]],[[]],[[]],[[]],[116,4],[115,[[10,[[23,[108]]]]]],[[],[[10,[[23,[108]]]]]],[[]],[[]],[[]],[[]],[[],115],[[115,[23,[108]]]],0,[[115,[23,[108]]]],[[[23,[108]]]],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[115,[23,[108]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[117,[[10,[[23,[108]]]]]],0,[[],[[10,[[23,[108]]]]]],[[],[[59,[[10,[[23,[108]]]]]]]],[[],106],[[],5],[[],5],[[],5],[[],117],[118],[[]],[[]],[[]],[117,88],[[],5],0,0,[[]],[[]],[[]],[[],117],[117],[[117,[23,[108]]]],[[]],[88],[117],[117,[[10,[[23,[108]]]]]],[117,[[10,[[23,[108]]]]]],[[],[[10,[[23,[108]]]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],97],[[97,97],97],[[97,97]],[[97,97],97],[[97,97]],[97,9],0,[[97,97],97],[[97,97]],[[]],[[]],[97,10],[97,97],[[]],[[97,97],46],[97,97],[[97,97],13],[[97,97],97],[[],97],[[97,97],13],[[97,47]],[[97,33],20],[[97,33],20],[[97,33],20],[[97,33],20],[[97,33],20],[[]],[9,[[10,[97]]]],[9,97],[9,97],[47,97],[97],[[97,97]],[[97,97],97],[[97,97],13],[[]],[97,13],[97,13],[[97,97],13],[97,97],[[97,97],[[10,[46]]]],[[97,97]],[[97,97,13]],[[97,97],97],[[97,97]],[[97,97],97],[[]],[[97,97]],[[],7],[[],7],[[],8],[[97,97],97],0,0,0,0,0,0,0,0,[119,5],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[120,120],[[]],[[108,108],46],0,[[108,108],13],[[120,120],13],[[108,[59,[85]]]],0,0,0,[23,[[23,[108]]]],[[]],[[]],[[]],0,[119,[[10,[40]]]],[119,120],[119,88],[119,106],[119,5],[108,5],0,0,[108,[[96,[119]]]],[[]],[[]],[[]],[119,13],0,0,[5,[[23,[108]]]],0,0,[[120,120],13],[[],108],[[23,5,5],[[23,[108]]]],[[23,5,5,5],[[23,[108]]]],0,[[108,108],[[10,[46]]]],0,0,0,0,0,0,0,0,[[]],0,0,[108,5],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],0,0,0,0,0,0,[[5,[23,[108]]]],[[]],[[]],[[]],[[]],[[]],[[121,121],46],[122,32],[[121,121],13],0,[[]],[[]],[[],5],[[],5],[[]],[[]],[[121,121],[[10,[46]]]],[[]],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[106],[[],6],[[],6],0,[[5,5,5,5,5],106],[[]],[[]],[106,106],[[]],[[],106],[[106,33],20],[[]],[[]],0,0,0,[[106,5]],0,[[]],0,[[],7],[[],7],[[],8],0],"p":[[3,"BOOTED_CPU_NUM"],[3,"AtomicUsize"],[3,"DEV_NON_BLOCKING_ACCESS"],[3,"TicketMutex"],[15,"usize"],[15,"never"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Option"],[3,"SimpleLogger"],[3,"Metadata"],[15,"bool"],[3,"Arguments"],[4,"Level"],[15,"u8"],[3,"Record"],[3,"Uart"],[15,"str"],[6,"Result"],[3,"KernelConsole"],[3,"BLOCK_DEVICE"],[3,"Arc"],[8,"SPI"],[3,"SDCard"],[4,"CMD"],[4,"InitError"],[3,"SDCardCSD"],[3,"SDCardCID"],[3,"SDCardInfo"],[3,"PERIPHERALS"],[3,"UPIntrFreeCell"],[3,"Formatter"],[3,"SDCardWrapper"],[3,"SPI0"],[3,"SPIImpl"],[3,"QUEUE_FRAMES"],[3,"VirtIOBlock"],[3,"PhysAddr"],[15,"i32"],[3,"VirtAddr"],[3,"UART"],[3,"IER"],[3,"LSR"],[3,"MCR"],[4,"Ordering"],[8,"IntoIterator"],[3,"NS16550a"],[3,"NS16550aRaw"],[3,"ReadWithoutDLAB"],[3,"WriteWithoutDLAB"],[3,"PLIC"],[4,"IntrTargetPriority"],[3,"UserBuffer"],[3,"OpenFlags"],[3,"ROOT_INODE"],[3,"Inode"],[3,"OSInode"],[3,"Vec"],[3,"PipeRingBuffer"],[4,"RingBufferStatus"],[3,"Pipe"],[3,"Stdin"],[3,"Stdout"],[3,"PanicInfo"],[3,"PhysPageNum"],[3,"VirtPageNum"],[8,"Clone"],[3,"SimpleRange"],[3,"SimpleRangeIterator"],[3,"StackFrameAllocator"],[3,"FrameTracker"],[3,"FRAME_ALLOCATOR"],[3,"UPSafeCell"],[3,"Layout"],[3,"MemorySet"],[3,"MapPermission"],[3,"MapArea"],[4,"MapType"],[3,"PageTable"],[3,"KERNEL_SPACE"],[3,"PageTableEntry"],[3,"PTEFlags"],[3,"UserBufferIterator"],[3,"String"],[3,"Condvar"],[8,"Mutex"],[3,"TaskContext"],[15,"isize"],[3,"MutexSpin"],[3,"MutexBlocking"],[3,"Semaphore"],[3,"UPIntrRefMut"],[3,"INTR_MASKING_INFO"],[3,"IntrMaskingInfo"],[3,"TicketMutexGuard"],[3,"SignalFlags"],[3,"SignalAction"],[3,"WAIT_LOCK"],[3,"INITPROC"],[3,"SignalActions"],[3,"KStack"],[4,"KthreadBits"],[3,"TgidHandle"],[3,"KERNEL_TGID_ALLOCATOR"],[3,"TrapContext"],[3,"TaskManager"],[3,"TaskControlBlock"],[3,"PID2TCB"],[3,"RecycleAllocator"],[3,"PidHandle"],[3,"PID_ALLOCATOR"],[3,"KSTACK_ALLOCATOR"],[3,"KernelStack"],[3,"TaskPool"],[3,"TASK_POOL"],[3,"Processor"],[3,"PROCESSORS"],[3,"TaskControlBlockInner"],[4,"TaskStatus"],[3,"TimerCondVar"],[3,"TIMERS"],[13,"CMDFailed"],[13,"CardCapacityStatusNotSet"],[8,"CharDevice"],[3,"NS16550aInner"],[8,"File"],[3,"OSInodeInner"],[8,"StepByOne"],[8,"FrameAllocator"],[3,"CondvarInner"],[3,"MutexBlockingInner"],[3,"SemaphoreInner"],[3,"ProcessorInner"],[13,"Running"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
